{"ast":null,"code":"var _jsxFileName = \"C:\\\\Repos\\\\into-the-west-campaign-tracker\\\\src\\\\Components\\\\Characters.js\";\nimport React from \"react\";\nimport data from \"../Data/Data.json\";\nimport \"./Characters.scss\";\n\nfunction Characters() {\n  const characters = data.characters.sort((a, b) => {\n    a = a.nickname ? a.nickname : a.name;\n    b = b.nickname ? b.nickname : b.name;\n    return a < b ? -1 : a > b ? 1 : 0;\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"panel characters-panel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header-and-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  }, \"Character Progression\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"button-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 11\n    }\n  }, \"Create Character\"))), /*#__PURE__*/React.createElement(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    key: \"thead\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    className: \"column name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }\n  }, \"Name\"), /*#__PURE__*/React.createElement(\"th\", {\n    className: \"column race\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }\n  }, \"Race\"), /*#__PURE__*/React.createElement(\"th\", {\n    className: \"column class\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }\n  }, \"Class\"), /*#__PURE__*/React.createElement(\"th\", {\n    className: \"column starting-level\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }\n  }, \"Starting Level\"), /*#__PURE__*/React.createElement(\"th\", {\n    className: \"column current-level\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }\n  }, \"Current Level\"), /*#__PURE__*/React.createElement(\"th\", {\n    className: \"column session-count\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }\n  }, \"Sessions Attended\"), /*#__PURE__*/React.createElement(\"th\", {\n    className: \"column sessions-to-level-up\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }, \"Sessions Until Level Up\"), /*#__PURE__*/React.createElement(\"th\", {\n    className: \"column next-session\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }\n  }, \"Next Session\"), /*#__PURE__*/React.createElement(\"th\", {\n    className: \"column test-date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }, \"Player\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, characters.map(character => {\n    return /*#__PURE__*/React.createElement(\"tr\", {\n      key: character.id,\n      \"data-id\": character.id,\n      title: character.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      className: \"column name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: `https://www.dndbeyond.com/avatars/${character[\"avatar-link\"]}`,\n      alt: character.nickname + \" avatar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"a\", {\n      className: \"character-name\",\n      rel: \"noopener noreferrer\",\n      target: \"_blank\",\n      href: `https://www.dndbeyond.com/profile/${character[\"player-dndbeyond-name\"]}/characters/${character.id}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 19\n      }\n    }, character.nickname ? character.nickname : character.name)), /*#__PURE__*/React.createElement(\"td\", {\n      className: \"column race\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      rel: \"noopener noreferrer\",\n      target: \"_blank\",\n      href: `https://www.dndbeyond.com/races/${character.race}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 19\n      }\n    }, `${character.race}${character.subrace ? ` (${character.subrace})` : \"\"}`)), /*#__PURE__*/React.createElement(\"td\", {\n      className: \"column class\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }\n    }, formatClasses(character.classes)), /*#__PURE__*/React.createElement(\"td\", {\n      className: \"column current-level\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }\n    }, calculateLevelFromClasses(character.classes)), /*#__PURE__*/React.createElement(\"td\", {\n      className: \"column starting-level\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }\n    }, character[\"starting-level\"]), /*#__PURE__*/React.createElement(\"td\", {\n      className: \"column session-count\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }\n    }, //TODO: Calculate this automatically\n    character[\"session-count\"]), /*#__PURE__*/React.createElement(\"td\", {\n      className: \"column sessions-to-level-up\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }\n    }, calculateRemainingSessionsForLevelUp(character[\"starting-level\"], character[\"session-count\"])), /*#__PURE__*/React.createElement(\"td\", {\n      className: \"column next-session\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }\n    }, character[\"next-session\"] ? character[\"next-session\"] : \"N/A\"), /*#__PURE__*/React.createElement(\"td\", {\n      className: \"column test-data\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }\n    }, data.players.map(player => {\n      if (player[\"dndbeyond-name\"] === character[\"player-dndbeyond-name\"]) {\n        return /*#__PURE__*/React.createElement(\"a\", {\n          rel: \"noopener noreferrer\",\n          target: \"_blank\",\n          href: `https://www.dndbeyond.com/members/${character[\"player-dndbeyond-name\"]}`,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 25\n          }\n        }, player[\"dndbeyond-name\"]);\n      }\n    })));\n  }))));\n}\n/**\r\n * Formats the classes a character has based on the array of its classes\r\n *\r\n * @param {{string, number}[]} classes Array of the character's classes\r\n *\r\n * @returns {string} A formatted list of the character's classes\r\n */\n\n\nfunction formatClasses(classes) {\n  var formattedClasses = `${classes[0].class} (${classes[0].level})`;\n  var i;\n\n  for (i = 1; i < classes.length; i++) {\n    formattedClasses += `, ${classes[i].class} (${classes[i].level})`;\n  }\n\n  return formattedClasses;\n}\n/**\r\n * Calculates the character's current level from an array of classes\r\n *\r\n * @param {{string, number}[]} classes The classes the character has\r\n *\r\n * @returns {number} The character's level\r\n */\n\n\nfunction calculateLevelFromClasses(classes) {\n  var totalLevel = 0;\n  classes.forEach(c => {\n    totalLevel += c.level;\n  });\n  return totalLevel;\n}\n/**\r\n * Calculates the remaining number of sessions a character must attend before levelling up\r\n *\r\n * @param {number} startingLevel The level that at which the character was created\r\n * @param {number} sessionCount The total number of sessions the character has attended\r\n *\r\n * @returns {number} The remaining number of sessions a character must attend in order to gain a level\r\n */\n\n\nfunction calculateRemainingSessionsForLevelUp(startingLevel, sessionCount) {\n  var currentLevel = calculateLevelFromSessions(startingLevel, sessionCount);\n  var sessionsRequiredForNext = calculateOffsetSessionsRequiredForLevel(currentLevel + 1);\n  var offsetCurrentSessions = sessionCount + calculateOffsetSessionsRequiredForLevel(startingLevel);\n  return sessionsRequiredForNext - offsetCurrentSessions;\n}\n/**\r\n * Calculates the number of sessions required for a character to gain a new level from\r\n * the start of the previous level\r\n *\r\n * @param {number} level The level for which to calculate the\r\n *\r\n * @returns {number} The number of sessions required for this level\r\n */\n\n\nfunction calculateTotalSessionsToNextLevel(level) {\n  return parseInt(level / 6) + 2;\n}\n/**\r\n * Calculates the character's current level from its starting level and session count\r\n *\r\n * @param {number} startingLevel The level that at which the character was created\r\n * @param {number} sessionCount The total number of sessions the character has attended\r\n *\r\n * @returns {number} The character's level\r\n */\n\n\nfunction calculateLevelFromSessions(startingLevel, sessionCount) {\n  var currentLevel = startingLevel;\n  var remainingSessions = sessionCount;\n  var sessionsToLevel = calculateTotalSessionsToNextLevel(currentLevel + 1);\n\n  while (remainingSessions >= sessionsToLevel) {\n    remainingSessions -= sessionsToLevel;\n    currentLevel++;\n    sessionsToLevel = calculateTotalSessionsToNextLevel(currentLevel + 1);\n  }\n\n  return currentLevel;\n}\n/**\r\n * Calculates the numnber of sessions required for a given level, assuming they were\r\n * created at 1st level\r\n *\r\n * @param {number} level The character's level\r\n *\r\n * @returns {number} The number of sessions required for this level\r\n */\n\n\nfunction calculateOffsetSessionsRequiredForLevel(level) {\n  var minimumSessions = 0;\n  var currentLevel = 1;\n\n  while (currentLevel < level) {\n    currentLevel++;\n    minimumSessions += calculateTotalSessionsToNextLevel(currentLevel);\n  }\n\n  return minimumSessions;\n}\n\nexport default Characters;","map":{"version":3,"sources":["C:/Repos/into-the-west-campaign-tracker/src/Components/Characters.js"],"names":["React","data","Characters","characters","sort","a","b","nickname","name","map","character","id","race","subrace","formatClasses","classes","calculateLevelFromClasses","calculateRemainingSessionsForLevelUp","players","player","formattedClasses","class","level","i","length","totalLevel","forEach","c","startingLevel","sessionCount","currentLevel","calculateLevelFromSessions","sessionsRequiredForNext","calculateOffsetSessionsRequiredForLevel","offsetCurrentSessions","calculateTotalSessionsToNextLevel","parseInt","remainingSessions","sessionsToLevel","minimumSessions"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport data from \"../Data/Data.json\";\r\nimport \"./Characters.scss\";\r\n\r\nfunction Characters() {\r\n  const characters = data.characters.sort((a, b) => {\r\n    a = a.nickname ? a.nickname : a.name;\r\n    b = b.nickname ? b.nickname : b.name;\r\n    return a < b ? -1 : a > b ? 1 : 0;\r\n  });\r\n\r\n  return (\r\n    <div className=\"panel characters-panel\">\r\n      <div className=\"header-and-button\">\r\n        <h2>Character Progression</h2>\r\n        <div className=\"button-container\">\r\n          <button>Create Character</button>\r\n        </div>\r\n      </div>\r\n      <table>\r\n        <thead key=\"thead\">\r\n          <tr>\r\n            <th className=\"column name\">Name</th>\r\n            <th className=\"column race\">Race</th>\r\n            <th className=\"column class\">Class</th>\r\n            <th className=\"column starting-level\">Starting Level</th>\r\n            <th className=\"column current-level\">Current Level</th>\r\n            <th className=\"column session-count\">Sessions Attended</th>\r\n            <th className=\"column sessions-to-level-up\">\r\n              Sessions Until Level Up\r\n            </th>\r\n            <th className=\"column next-session\">Next Session</th>\r\n            <th className=\"column test-date\">Player</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {characters.map((character) => {\r\n            return (\r\n              <tr\r\n                key={character.id}\r\n                data-id={character.id}\r\n                title={character.name}\r\n              >\r\n                <td className=\"column name\">\r\n                  <img\r\n                    src={`https://www.dndbeyond.com/avatars/${character[\"avatar-link\"]}`}\r\n                    alt={character.nickname + \" avatar\"}\r\n                  />\r\n                  <a\r\n                    className=\"character-name\"\r\n                    rel=\"noopener noreferrer\"\r\n                    target=\"_blank\"\r\n                    href={`https://www.dndbeyond.com/profile/${character[\"player-dndbeyond-name\"]}/characters/${character.id}`}\r\n                  >\r\n                    {character.nickname ? character.nickname : character.name}\r\n                  </a>\r\n                </td>\r\n                <td className=\"column race\">\r\n                  <a\r\n                    rel=\"noopener noreferrer\"\r\n                    target=\"_blank\"\r\n                    href={`https://www.dndbeyond.com/races/${character.race}`}\r\n                  >{`${character.race}${\r\n                    character.subrace ? ` (${character.subrace})` : \"\"\r\n                  }`}</a>\r\n                </td>\r\n                <td className=\"column class\">\r\n                  {formatClasses(character.classes)}\r\n                </td>\r\n                <td className=\"column current-level\">\r\n                  {calculateLevelFromClasses(character.classes)}\r\n                </td>\r\n                <td className=\"column starting-level\">\r\n                  {character[\"starting-level\"]}\r\n                </td>\r\n                <td className=\"column session-count\">\r\n                  {\r\n                    //TODO: Calculate this automatically\r\n                    character[\"session-count\"]\r\n                  }\r\n                </td>\r\n                <td className=\"column sessions-to-level-up\">\r\n                  {calculateRemainingSessionsForLevelUp(\r\n                    character[\"starting-level\"],\r\n                    character[\"session-count\"]\r\n                  )}\r\n                </td>\r\n                <td className=\"column next-session\">\r\n                  {character[\"next-session\"]\r\n                    ? character[\"next-session\"]\r\n                    : \"N/A\"}\r\n                </td>\r\n                <td className=\"column test-data\">\r\n                  {data.players.map((player) => {\r\n                    if (\r\n                      player[\"dndbeyond-name\"] ===\r\n                      character[\"player-dndbeyond-name\"]\r\n                    ) {\r\n                      return (\r\n                        <a\r\n                          rel=\"noopener noreferrer\"\r\n                          target=\"_blank\"\r\n                          href={`https://www.dndbeyond.com/members/${character[\"player-dndbeyond-name\"]}`}\r\n                        >\r\n                          {player[\"dndbeyond-name\"]}\r\n                        </a>\r\n                      );\r\n                    }\r\n                  })}\r\n                </td>\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\n/**\r\n * Formats the classes a character has based on the array of its classes\r\n *\r\n * @param {{string, number}[]} classes Array of the character's classes\r\n *\r\n * @returns {string} A formatted list of the character's classes\r\n */\r\nfunction formatClasses(classes) {\r\n  var formattedClasses = `${classes[0].class} (${classes[0].level})`;\r\n\r\n  var i;\r\n  for (i = 1; i < classes.length; i++) {\r\n    formattedClasses += `, ${classes[i].class} (${classes[i].level})`;\r\n  }\r\n\r\n  return formattedClasses;\r\n}\r\n\r\n/**\r\n * Calculates the character's current level from an array of classes\r\n *\r\n * @param {{string, number}[]} classes The classes the character has\r\n *\r\n * @returns {number} The character's level\r\n */\r\nfunction calculateLevelFromClasses(classes) {\r\n  var totalLevel = 0;\r\n\r\n  classes.forEach((c) => {\r\n    totalLevel += c.level;\r\n  });\r\n\r\n  return totalLevel;\r\n}\r\n\r\n/**\r\n * Calculates the remaining number of sessions a character must attend before levelling up\r\n *\r\n * @param {number} startingLevel The level that at which the character was created\r\n * @param {number} sessionCount The total number of sessions the character has attended\r\n *\r\n * @returns {number} The remaining number of sessions a character must attend in order to gain a level\r\n */\r\nfunction calculateRemainingSessionsForLevelUp(startingLevel, sessionCount) {\r\n  var currentLevel = calculateLevelFromSessions(startingLevel, sessionCount);\r\n\r\n  var sessionsRequiredForNext = calculateOffsetSessionsRequiredForLevel(\r\n    currentLevel + 1\r\n  );\r\n\r\n  var offsetCurrentSessions =\r\n    sessionCount + calculateOffsetSessionsRequiredForLevel(startingLevel);\r\n\r\n  return sessionsRequiredForNext - offsetCurrentSessions;\r\n}\r\n\r\n/**\r\n * Calculates the number of sessions required for a character to gain a new level from\r\n * the start of the previous level\r\n *\r\n * @param {number} level The level for which to calculate the\r\n *\r\n * @returns {number} The number of sessions required for this level\r\n */\r\nfunction calculateTotalSessionsToNextLevel(level) {\r\n  return parseInt(level / 6) + 2;\r\n}\r\n\r\n/**\r\n * Calculates the character's current level from its starting level and session count\r\n *\r\n * @param {number} startingLevel The level that at which the character was created\r\n * @param {number} sessionCount The total number of sessions the character has attended\r\n *\r\n * @returns {number} The character's level\r\n */\r\nfunction calculateLevelFromSessions(startingLevel, sessionCount) {\r\n  var currentLevel = startingLevel;\r\n  var remainingSessions = sessionCount;\r\n  var sessionsToLevel = calculateTotalSessionsToNextLevel(currentLevel + 1);\r\n\r\n  while (remainingSessions >= sessionsToLevel) {\r\n    remainingSessions -= sessionsToLevel;\r\n    currentLevel++;\r\n    sessionsToLevel = calculateTotalSessionsToNextLevel(currentLevel + 1);\r\n  }\r\n\r\n  return currentLevel;\r\n}\r\n\r\n/**\r\n * Calculates the numnber of sessions required for a given level, assuming they were\r\n * created at 1st level\r\n *\r\n * @param {number} level The character's level\r\n *\r\n * @returns {number} The number of sessions required for this level\r\n */\r\nfunction calculateOffsetSessionsRequiredForLevel(level) {\r\n  var minimumSessions = 0;\r\n  var currentLevel = 1;\r\n\r\n  while (currentLevel < level) {\r\n    currentLevel++;\r\n    minimumSessions += calculateTotalSessionsToNextLevel(currentLevel);\r\n  }\r\n\r\n  return minimumSessions;\r\n}\r\n\r\nexport default Characters;\r\n"]},"metadata":{},"sourceType":"module"}